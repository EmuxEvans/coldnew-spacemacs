#+TITLE: coldnew's emacs config
#+AUTHOR: Yen-Chin, Lee <coldnew>
#+email: coldnew.tw at gmail.com
#+STARTUP: overview indent align
#+BABEL: :cache yes
#+OPTIONS: ^:nil

# Badge
[[http://www.gnu.org/licenses/gpl-3.0.txt][https://img.shields.io/badge/license-GPL_3-green.svg?dummy]]
[[https://travis-ci.org/coldnew/coldnew-spacemacs][https://travis-ci.org/coldnew/coldnew-spacemacs.svg?branch=master]]

* About

This is my another emacs config, which is a totally rewrite version
based on top of [[https://github.com/syl20bnr/spacemacs][spacemacs]] and [[https://github.com/coldnew/coldnew-emacs][coldnew-emacs]] with [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]]
in [[http://orgmode.org/][org-mode]] ,but use English to write this config instead.

Feal free to use it :).

*Hint*: before fork and hack my emacs config, take a look at [[file:init.el]]

** Install or testing this config

- First use git to download whole repo

  : git clone https://github.com/coldnew/coldnew-spacemacs.git

- Then use git submodule to download the spacemacs

  : git submodule init
  : git submodule update

- Befor trying starting emacs, you need to bootstrap with [[https://github.com/cask/cask][Cask]]

  : cask install

- If you don not put this repo on =~/.emacs.d=, you need to use following
  command to start emacs

  : emacs -q -l ~/coldnew-spacemacs/init.el

** Packages need to install in system (Optional)

Some extra packages need to install in system manually. These packages
are =optional= but can make my spacemacs work more nicely.

- Mac OSX

  #+BEGIN_SRC sh
    brew install the_silver_searcher
    brew install fasd
    brew install mu --with-emacs --HEAD
    brew install doxymacs
  #+END_SRC


- Gentoo Linux

  #+BEGIN_SRC sh
    emerge sys-apps/the_silver_searcher
    emerge app-shells/fasd
    USE="emacs" emerge net-mail/mu
    emerge  app-emacs/doxymacs
  #+END_SRC

* Package Management with Cask and Pallet

[[https://github.com/rdallasgray/pallet][Pallet]] is a wonderful little tool built on [[https://github.com/cask/cask][Cask]], a dependency
management tool for Emacs packages. Pallet adds automatic updating of
the =Caskfile= when packages are installed and deleted.

** Installing Cask

Just run this command in your terminal of choice:

#+BEGIN_SRC sh :tangle no
  $ curl -fsSkL https://raw.github.com/cask/cask/master/go | python
#+END_SRC

then add =~/.cask/bin= to your =PATH= so that you can use =cask=.

** Creating a Caskfile

For now, we just need a minimal =Cask= to get Pallet set up. Mine
looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
  (source gnu)
  (source melpa)

  (depends-on "pallet")
  (depends-on "req-package")
  (depends-on "f")
  (depends-on "evil")
  (depends-on "moe-theme")
#+END_SRC

Then run the following command in your =.emacs.d= directory to set up
[[https://github.com/rdallasgray/pallet][Pallet]].

#+BEGIN_SRC sh :tangle no
  cask install
#+END_SRC

** Initialize Cask

Finally, we add the following lines to our init file:

#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
#+END_SRC

** Initialize Pallet

Since we already install pallet via cask, we just need to use
following code to initialize pallet.

#+BEGIN_SRC emacs-lisp
  (require 'pallet)
  (pallet-mode t)
#+END_SRC

* Dependency Management with req-package

[[https://github.com/edvorg/req-package][req-package]] is a wrapper on top of [[https://github.com/jwiegley/use-package][use-package]], a package dependency
management tool. The documentation for =use-package= is immensely
helpful for figuring out how to describe package dependencies and
settings. =req-package= adds the =:require= keyword which allows us to
define dependencies between related packages.

** Initialize req-package

With the preceding process complete, we just need to add the following
line to our init file to begin using =req-package=:

#+BEGIN_SRC emacs-lisp
  (require 'req-package)
#+END_SRC

** Start loading packages in right order

To start loading packages in right order, we need to added following
in the last of emacs config.

#+BEGIN_SRC emacs-lisp :tangle no
  (req-package-finish)
#+END_SRC

You can take a look at [[*End%20of%20configuration][End of configuration]] section.

* Load Path

The variable =load-path= lists all the directories where Emacs should
look for Elisp files.

Though I use =Cask= as package management in my emacs, some local
packages like my own theme or others can't fetch by elpa need to add
to load-path, this will help emacs find them.

Following are my method to add directories to load-path ~recursively~,
this function also create directory to prevent directory not exist.

If you don't have any local elisp and all packages is mantain by cask
or elpa or spacemacs, you can skip following code.

#+BEGIN_SRC emacs-lisp
  ;; Add directories to emacs's `load-path' recursively.
  ;; if path does not exist, create directory.
  (let* ((lisp-dir '("local-lisp/" "theme/")))
    (dolist (lisp-path lisp-dir)
      (when (not (file-exists-p lisp-path))
        (make-directory (concat emacs-dir lisp-path) t))
      (let* ((load-dir (concat emacs-dir lisp-path))
             (default-directory load-dir))
        (setq load-path
              (append
               (let ((load-path (copy-sequence load-path)))
                 (append
                  (copy-sequence (normal-top-level-add-to-load-path '(".")))
                  (normal-top-level-add-subdirs-to-load-path)))
               load-path)))))
#+END_SRC

* Spacemacs

[[https://github.com/syl20bnr/spacemacs][Spacemacs]] is an emacs starterkit focus on [[https://gitorious.org/evil/pages/Home][Evil]], which emulate vim
keymap on Emacs.

I make my emacs on top of spacemacs since I also use vim keymap.

In my config file, the original =~/.spacemacs= file has move to
=spacemacs.el= under emacs-dir folder, I also advice spacemacs funtion
to let it not delete the orphan packages not installed by spacemacs.

#+BEGIN_SRC emacs-lisp
  ;; Make spacemacs not remove my orphan packages.
  (defadvice configuration-layer/delete-orphan-packages (around null-func activate)
    "Overwrite the spacemacs's `configuration-layer/delete-orphan-packages'
  to make it not remove any orphan packages.")

  ;; Make a fake entry point for spacemacs, also modify the
  ;; `user-emacs-directory' temporary to mislead spacemacs real emacs
  ;; directory.
  (let* ((spacemacs-dir
          (directory-file-name (concat emacs-dir "spacemacs")))
         (spacemacs-init
          (concat (file-name-as-directory spacemacs-dir) "init.el"))
         (user-emacs-directory (file-name-directory spacemacs-init)))

    ;; load my config instead of make spacemacs load ~/.spacemacs
    (load (concat emacs-dir "spacemacs.el"))

    ;; Initial spacemacs, our emacs run on top of it
    (load spacemacs-init))
#+END_SRC

* Languages and Encodings

Since current Emacs default run on UTF-8, it's no need to setup the
encoding.

For language, though Traditional Chinese is my mothertone, I still
prefer use =en_US= to display time info.

#+BEGIN_SRC emacs-lisp
  (setq system-time-locale "en_US" )
#+END_SRC

* Packages

** ascii

[[http://www.emacswiki.org/emacs/AsciiMode][Ascii]] provides a way to display ASCII code on a window, that is,
display in another window an ASCII table highlighting the current
character code.

#+BEGIN_SRC emacs-lisp
  (req-package ascii
    :init
    (progn
      ;; ascii-toggle
      (defun ascii-toggle ()
        "Toggle ascii-mode."
        (interactive)
        (if (not (ascii-off)) (ascii-on)))

      ;; alias ascii to ascii-toggle
      (defalias 'ascii 'ascii-toggle)))
#+END_SRC

** iedit

[[https://github.com/victorhge/iedit][iedit]] let you edit multiple regions in the same way simultaneously.

#+BEGIN_SRC emacs-lisp
  (req-package iedit)
#+END_SRC

** pangu-spacing

[[https://github.com/coldnew/pangu-spacing][pangu-spcing]] is an minor-mode to auto add =space= between Chinese and
English characters. Note that these white-space characters are not
really added to the contents, it just like to do so.

#+BEGIN_SRC emacs-lisp
  (req-package pangu-spacing
    :init
    (progn
      ;; Always insert `real' space in org-mode.
      (add-hook 'org-mode-hook
                '(lambda ()
                   (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))
      ))
#+END_SRC

** lusty-explorer

[[https://github.com/sjbach/lusty-emacs][lusty-explorer]] s a fast and responsive way to manage files and
buffers. It includes both a filesystem explorer and a buffer switcher
through a common interface.

#+BEGIN_SRC emacs-lisp
  (req-package lusty-explorer
    :init
    (progn
      ;; use lusty-explorer method to do completion
      (eval-after-load "helm-mode"
        '(progn
           (add-to-list 'helm-completing-read-handlers-alist '(lusty-file-explorer . nil))
           (add-to-list 'helm-completing-read-handlers-alist '(lusty-buffer-explorer . nil))))
      ))
#+END_SRC

** nyan-mode

[[https://github.com/TeMPOraL/nyan-mode][nyan-mode]] is a goofy way to display one's location in a file.

#+BEGIN_SRC emacs-lisp
  (req-package nyan-mode
           :init
           (progn
;;             (nyan-mode)
             (setq nyan-wavy-trail t))
           :config (nyan-start-animation))
#+END_SRC

** sx

[[https://github.com/vermiculus/sx.el/][SX]] is a full featured Stack Exchange mode for GNU Emacs 24+. Using the
official API, it provides a versatile experience for the Stack
Exchange network within Emacs itself.

#+BEGIN_SRC emacs-lisp
  (req-package sx :require sx-load)
#+END_SRC

* Theme

I always use dark theme for coding, [[https://github.com/kuanyui/moe-theme.el][moe-theme]] is a good start point,
it's bright and has good default faces for most modes. It also has
dark and light versions, which is convenient.

Before use emacs's =load-theme= function, I advise it to it fully
unload previous theme before loading a new one.

#+BEGIN_SRC emacs-lisp
  ;; Make `load-theme' fully unload previous theme before loading a new
  ;; one.
  (defadvice load-theme
      (before theme-dont-propagate activate)
    (mapc #'disable-theme custom-enabled-themes))

  (req-package coldnew-moe-theme
    :require moe-theme
    :init (coldnew-moe-theme-night))
#+END_SRC

* Editors

Why emacs config has an editor section, doesn't means emacs is not an
editor ? Yes, Emacs is an OS :)

I put some editor/IDE relative functions and packages here.

** Line Numbers

In most case, I'll make line numers display globally by =linum=.

#+BEGIN_SRC emacs-lisp
  (req-package linum :init (global-linum-mode 1))
#+END_SRC

Disable line number in some mode, for example, since =org-mode= can
has many lines, it's not recommand to enable linum-mode.

I use =linum-off= to disable some mode.

#+BEGIN_SRC emacs-lisp
  (req-package linum-off
    :config
    (progn
      (setq linum-disabled-mode-list
            '(eshell-mode shell-mode term-mode erc-mode compilation-mode
                          woman-mode w3m-mode calendar-mode org-mode
                          ))))
#+END_SRC

** Colorfy delimters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is a "rainbow parentheses"-like mode which
highlights delimiters such as parentheses, brackets or braces
according to their depth. Each successive level is highlighted in a
different color. This makes it easy to spot matching delimiters,
orient yourself in the code, and tell which statements are at a given
depth.

#+BEGIN_SRC emacs-lisp
  (req-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Programming Languages

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
  (req-package lisp-mode
    :init
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (setq mode-name " ξ "))))
#+END_SRC

* End of configuration

At long last we need only call the following function to send
=req-package= on its merry way.

#+BEGIN_SRC emacs-lisp
  (req-package-finish)
#+END_SRC
